diff -aud -U 5 libpar2-0.4-original/par2repairer.cpp libpar2-0.4-patched/par2repairer.cpp
--- libpar2-0.4-original/par2repairer.cpp	2013-07-12 17:33:15.000000000 +0200
+++ libpar2-0.4-patched/par2repairer.cpp	2014-07-26 23:29:18.000000000 +0200
@@ -52,10 +52,11 @@
   noiselevel = CommandLine::nlNormal;
   headers = new ParHeaders;
   alreadyloaded = false;
 
   cancelled = false;
+  blockscan = false;
 }
 
 Par2Repairer::~Par2Repairer(void)
 {
   delete [] (u8*)inputbuffer;
@@ -1682,10 +1683,19 @@
 
         // Advance one whole block
         if (!filechecksummer.Jump(blocksize))
           return false;
       }
+      else if (blockscan)
+      {
+        // What entry would we expect next
+        nextentry = 0;
+
+        // Advance one whole block
+        if (!filechecksummer.Jump(blocksize))
+          return false;
+      }
       else
       {
         // What entry do we expect next
         nextentry = 0;
 
diff -aud -U 5 libpar2-0.4-original/par2repairer.h libpar2-0.4-patched/par2repairer.h
--- libpar2-0.4-original/par2repairer.h	2013-07-18 15:03:10.000000000 +0200
+++ libpar2-0.4-patched/par2repairer.h	2014-07-26 23:27:01.000000000 +0200
@@ -94,11 +94,11 @@
   // Perform a sliding window scan of the DiskFile looking for blocks of data that 
   // might belong to any of the source files (for which a verification packet was
   // available). If a block of data might be from more than one source file, prefer
   // the one specified by the "sourcefile" parameter. If the first data block
   // found is for a different source file then "sourcefile" is changed accordingly.
-  bool ScanDataFile(DiskFile                *diskfile,   // [in]     The file being scanned
+  virtual bool ScanDataFile(DiskFile                *diskfile,   // [in]     The file being scanned
                     Par2RepairerSourceFile* &sourcefile, // [in/out] The source file matched
                     MatchType               &matchtype,  // [out]    The type of match
                     MD5Hash                 &hashfull,   // [out]    The full hash of the file
                     MD5Hash                 &hash16k,    // [out]    The hash of the first 16k
                     u32                     &count);     // [out]    The number of blocks found
@@ -187,8 +187,9 @@
   u64                       progress;                // How much data has been processed.
   u64                       totaldata;               // Total amount of data to be processed.
   u64                       totalsize;               // Total data size
 
   bool                      cancelled;               // repair cancelled
+  bool                      blockscan;               // Scan data files block-wise, don't try to find moved blocks (disables CRC sliding).
 };
 
 #endif // __PAR2REPAIRER_H__
